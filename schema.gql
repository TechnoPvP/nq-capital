# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserEntity {
  """Incremental based user ID"""
  id: Int!
  middle_name: String
  avatar: String
  mobile_number: String
  role: UserRole!
  first_name: String!
  last_name: String!
  email: String!
  created_at: DateTime!
  updated_at: DateTime!
}

"""Role of a given user"""
enum UserRole {
  ADMIN
  MANAGER
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PaginatedUserEntity {
  data: [UserEntity!]
  limit: Int!
  page: Int!
  count: Int!
  hasNextPage: Boolean!
}

type InvestorEntity {
  id: Int!
  first_name: String!
  middle_name: String
  last_name: String!
  email: String!
  password: String
  passport_number: String
  national_id: String
  date_of_birth: DateTime
  nationality: String
  company_name: String
  company_tax_id: String
  is_accredited: Boolean
  avatar: String
  mobile_number: String
  account_status: InvestorAccountStatus
  address_id: Int
  created_at: DateTime!
  updated_at: DateTime!
}

enum InvestorAccountStatus {
  ONBOARDING
  ACTIVE
  DISABLED
}

type FundEntity {
  id: Int!
  name: String!
  balance: Float!
  created_at: DateTime!
  updated_at: DateTime!
}

type InvestorFundWithBalanceEntity {
  id: Int!
  stake_percentage: Float!
  initial_investment: Int!
  investor_id: Int!
  fund_id: Int!
  investor: InvestorEntity!
  fund: FundEntity!
  created_at: DateTime!
  updated_at: DateTime!
  investor_balance_in_fund: Float!
}

"""Prisma Decimal Scalar"""
scalar Decimal

type Query {
  users(
    """The page number to retrieve starting from zero"""
    page: Int! = 100

    """The number of items to retrieve for a given page"""
    limit: Int! = 100

    """Filter users by a specific role"""
    role: UserRole
  ): PaginatedUserEntity!
  user(id: Int!): UserEntity!
  investors: [InvestorEntity!]!
  investor(id: Int!): InvestorEntity!
  investorFunds(investorId: Int!): [InvestorFundWithBalanceEntity!]!
  funds: [FundEntity!]!
  fund(id: Int!): FundEntity!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): UserEntity!
  updateUser(updateUserInput: UpdateUserInput!): UserEntity!
  removeUser(id: Int!): UserEntity!
  createInvestor(createInvestorInput: CreateInvestorInput!): InvestorEntity!
  updateInvestor(updateInvestorInput: UpdateInvestorInput!): InvestorEntity!
  removeInvestor(id: Int!): InvestorEntity!
  createFund(createFundInput: CreateFundInput!): FundEntity!
  updateFund(updateFundInput: UpdateFundInput!): FundEntity!
  removeFund(id: Int!): FundEntity!
}

input CreateUserInput {
  email: String!
  first_name: String!
  middle_name: String
  last_name: String!
  password: String!
  avatar: String
  mobile_number: String
}

input UpdateUserInput {
  email: String
  first_name: String
  middle_name: String
  last_name: String
  password: String
  avatar: String
  mobile_number: String
  id: Int!
}

input CreateInvestorInput {
  date_of_birth: DateTime
  account_status: InvestorAccountStatus

  """Investor first name"""
  first_name: String!

  """Investor middle name"""
  middle_name: String
  last_name: String!
  email: String!
  password: String
  passport_number: String
  national_id: String
  nationality: String
  company_name: String
  company_tax_id: String
  is_accredited: Boolean
  avatar: String
  mobile_number: String
  address_id: Int
}

input UpdateInvestorInput {
  date_of_birth: DateTime
  account_status: InvestorAccountStatus

  """Investor first name"""
  first_name: String

  """Investor middle name"""
  middle_name: String
  last_name: String
  email: String
  password: String
  passport_number: String
  national_id: String
  nationality: String
  company_name: String
  company_tax_id: String
  is_accredited: Boolean
  avatar: String
  mobile_number: String
  address_id: Int
  id: Int!
}

input CreateFundInput {
  name: String!
  initial_balance: Int

  """Investor fund"""
  investors: [CreateNestedInvestorFundWithoutFundInput!]
}

input CreateNestedInvestorFundWithoutFundInput {
  """Percentage of the fund the investor has staked.. e.g. 0.5 for 50%"""
  stake_percentage: Float!
  initial_investment: Float!
  investor_id: Int!
}

input UpdateFundInput {
  name: String

  """Investor fund"""
  investors: [CreateNestedInvestorFundWithoutFundInput!]
  id: Int!
}