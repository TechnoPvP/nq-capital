# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserEntity {
  """Incremental based user ID"""
  id: Int!
  middle_name: String
  avatar: String
  mobile_number: String
  role: UserRole!
  first_name: String!
  last_name: String!
  email: String!
  created_at: DateTime!
  updated_at: DateTime!
}

"""Role of a given user"""
enum UserRole {
  ADMIN
  MANAGER
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PaginatedUserEntity {
  data: [UserEntity!]
  limit: Int!
  page: Int!
  count: Int!
  hasNextPage: Boolean!
}

type FundEntity {
  id: Int!
  name: String!
  balance: Float!
  created_at: DateTime!
  updated_at: DateTime!
}

type InvestorEntity {
  id: Int!
  first_name: String!
  middle_name: String
  last_name: String!
  email: String!
  password: String
  passport_number: String
  national_id: String
  date_of_birth: DateTime
  nationality: String
  company_name: String
  company_tax_id: String
  is_accredited: Boolean
  avatar: String
  mobile_number: String
  account_status: InvestorAccountStatus
  address_id: Int
  created_at: DateTime!
  updated_at: DateTime!
  address: AddressEntity
  bank_accounts: [BankAccountEntity!]
}

enum InvestorAccountStatus {
  ONBOARDING
  ACTIVE
  DISABLED
}

type AddressEntity {
  id: Int!
  street: String!
  street_2: String
  city: String!
  state_province: String!
  postal_zip_code: String
  country: String!
  country_code: String!
  latitude: Float!
  longitude: Float!
  verified: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BankAccountEntity {
  id: Int!
  nickname: String
  bank_name: String!
  account_number: String!
  account_holder_name: String!
  type: BankAccountType
  bank_country: String!
  currency: String!
  routing_number: String
  swift_code: String
  iban: String
  sort_code: String
  bsb_number: String
  bank_code: String
  branch_code: String
  branch_address: String
  is_primary: Boolean!
  investor_id: Int!
  created_at: DateTime!
  updated_at: DateTime!
}

enum BankAccountType {
  CHECKING
  SAVINGS
}

type InvestorFundEntity {
  id: Int!
  stake_percentage: Float!
  invested_amount: Float!
  initial_investment: Int!
  investor_id: Int!
  fund_id: Int!
  investor: InvestorEntity!
  investor_balance_in_fund: Float!
  balance: Float!
  fund: FundEntity!
  created_at: DateTime!
  updated_at: DateTime!
}

type PaginatedInvestorFundEntity {
  data: [InvestorFundEntity!]
  limit: Int!
  page: Int!
  count: Int!
  hasNextPage: Boolean!
}

type TransactionEntity {
  id: Int!
  type: TransactionType!
  amount: Int!
  currency_code: String!
  balance_after: Int!
  description: String
  fee: Float
  external_id: String
  status: TransactionStatus!
  created_at: DateTime!
  updated_at: DateTime!
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  ADJUSTMENT
  FEE
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  REVERSED
  FAILED
}

type TicketEntity {
  id: Int!
  data: JSON
  priority: TicketPriority!
  type: TicketType!
  status: TicketStatus!
  investor_id: Int!
  assigned_to_user_id: Int
  updated_at: DateTime!
  created_at: DateTime!
  messages: [MessageEntity!]!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Priority of ticket"""
enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

"""Type of ticket"""
enum TicketType {
  DOCUMENT_REQUEST
  SUPPORT
}

"""Status of ticket"""
enum TicketStatus {
  CLOSED
  OPEN
  UNDER_REVIEW
}

type SessionEntity {
  user: UserEntity
  investor: InvestorEntity
}

type MessageEntity {
  id: Int!
  content: String!
  type: UserType!
  ticket_id: Int
  sent_by_user_id: Int
  sent_by_investor_id: Int
  edit_count: Int!
  updated_at: DateTime!
  created_at: DateTime!
  sent_by_investor: InvestorEntity
  sent_by_user: UserEntity
}

"""Type of user"""
enum UserType {
  INVESTOR
  ADMIN
}

type LogoutEntity {
  status: String!
}

"""Prisma Decimal Scalar"""
scalar Decimal

type Query {
  users(
    """The page number to retrieve starting from zero"""
    page: Int! = 0

    """The number of items to retrieve for a given page"""
    limit: Int! = 100

    """Filter users by a specific role"""
    role: UserRole
  ): PaginatedUserEntity!
  user(id: Int!): UserEntity!
  investors: [InvestorEntity!]!
  investor(id: Int!): InvestorEntity!
  funds: [FundEntity!]!
  fund(id: Int!): FundEntity!
  investorFunds(
    """The page number to retrieve starting from zero"""
    page: Int! = 0

    """The number of items to retrieve for a given page"""
    limit: Int! = 100

    """FIlter by an investor's ID"""
    investorId: Int

    """FIlter by a fund ID"""
    fundId: Int
  ): PaginatedInvestorFundEntity!
  investorFund(id: Int!): [InvestorFundEntity!]!
  transactions: [TransactionEntity!]!
  transaction(id: Int!): TransactionEntity!
  tickets: [TicketEntity!]!
  ticket(id: Int!): TicketEntity!
  messages: [MessageEntity!]!
  message(id: Int!): MessageEntity!
  me: SessionEntity!
  meInvestor: InvestorEntity!
  meUser: UserEntity!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): UserEntity!
  updateUser(updateUserInput: UpdateUserInput!): UserEntity!
  removeUser(id: Int!): UserEntity!
  createInvestor(createInvestorInput: CreateInvestorInput!): InvestorEntity!
  updateInvestor(updateInvestorInput: UpdateInvestorInput!): InvestorEntity!
  removeInvestor(id: Int!): InvestorEntity!
  createFund(createFundInput: CreateFundInput!): FundEntity!
  updateFund(updateFundInput: UpdateFundInput!): FundEntity!
  adjustFund(adjustFundInput: AdjustFundInput!): FundEntity!
  addFundInvestors(addFundInvestorsInput: AddFundInvestorsInput!): FundEntity!
  removeFund(id: Int!): FundEntity!
  createTransaction(createTransactionInput: CreateTransactionInput!): TransactionEntity!
  updateTransaction(updateTransactionInput: UpdateTransactionInput!): TransactionEntity!
  removeTransaction(id: Int!): TransactionEntity!
  createTicket(createTicketInput: CreateTicketInput!): TicketEntity!
  sendTicketMessage(sendTicketMessageInput: SendTicketMessageInput!): MessageEntity!
  updateTicket(updateTicketInput: UpdateTicketInput!): TicketEntity!
  removeTicket(id: Int!): TicketEntity!
  createMessage(createMessageInput: SendMessageInput!): MessageEntity!
  updateMessage(updateMessageInput: UpdateMessageInput!): MessageEntity!
  removeMessage(id: Int!): MessageEntity!
  login(loginInput: LoginInput!): UserEntity!
  logout: LogoutEntity!
}

input CreateUserInput {
  email: String!
  first_name: String!
  middle_name: String
  last_name: String!
  password: String!
  avatar: String
  mobile_number: String
}

input UpdateUserInput {
  email: String
  first_name: String
  middle_name: String
  last_name: String
  password: String
  avatar: String
  mobile_number: String
  id: Int!
}

input CreateInvestorInput {
  date_of_birth: DateTime
  account_status: InvestorAccountStatus
  bank_accounts: [BankAccountWithoutInvestorInput!]

  """Investor first name"""
  first_name: String!

  """Investor middle name"""
  middle_name: String
  last_name: String!
  email: String!
  password: String
  passport_number: String
  national_id: String
  nationality: String
  company_name: String
  company_tax_id: String
  is_accredited: Boolean
  avatar: String
  mobile_number: String
  address_id: Int
}

input BankAccountWithoutInvestorInput {
  nickname: String
  bank_name: String!
  account_number: String!
  account_holder_name: String!
  type: BankAccountType
  bank_country: String!
  currency: String!
  routing_number: String
  swift_code: String
  iban: String
  sort_code: String
  bsb_number: String
  bank_code: String
  branch_code: String
  branch_address: String
  is_primary: Boolean
}

input UpdateInvestorInput {
  date_of_birth: DateTime
  account_status: InvestorAccountStatus

  """Investor first name"""
  first_name: String

  """Investor middle name"""
  middle_name: String
  last_name: String
  email: String
  password: String
  passport_number: String
  national_id: String
  nationality: String
  company_name: String
  company_tax_id: String
  is_accredited: Boolean
  avatar: String
  mobile_number: String
  address_id: Int
  id: Int!
}

input CreateFundInput {
  name: String!
  initial_balance: Int

  """Investor fund"""
  investors: [CreateNestedInvestorFundWithoutFundInput!]
}

input CreateNestedInvestorFundWithoutFundInput {
  initial_investment: Float!
  investor_id: Int!
}

input UpdateFundInput {
  name: String
  id: Int!
}

input AdjustFundInput {
  "Amount to adjust the fund by. Can be a negative\r\nor positive value."
  amount: Float!
  fund_id: Int!
  adjusted_by_user_id: Int!
  description: String
}

input AddFundInvestorsInput {
  id: Int!
  investor_id: Int!
  initial_investment: Float!
}

input CreateTransactionInput {
  type: TransactionType!
  amount: Int!
  currency_code: String!
  balance_after: Int!
  description: Int
  fee: Float
  external_id: String
  status: TransactionStatus!
}

input UpdateTransactionInput {
  type: TransactionType
  amount: Int
  currency_code: String
  balance_after: Int
  description: Int
  fee: Float
  external_id: String
  status: TransactionStatus
  id: Int!
}

input CreateTicketInput {
  data: JSON!
  priority: TicketPriority = MEDIUM
  investor_id: Int
  assigned_to_user_id: Int
  type: TicketType!
  status: TicketStatus = OPEN
}

input SendTicketMessageInput {
  content: String!
  type: UserType!
  ticket_id: Int!
}

input UpdateTicketInput {
  data: JSON
  priority: TicketPriority = MEDIUM
  investor_id: Int
  assigned_to_user_id: Int
  type: TicketType
  status: TicketStatus = OPEN
  id: Int!
}

input SendMessageInput {
  content: String!
  type: UserType!
}

input UpdateMessageInput {
  content: String
  type: UserType
  id: Int!
}

"""Login user input"""
input LoginInput {
  """Email of the user"""
  email: String!

  """Password of the user"""
  password: String!
  user_type: UserType!
}