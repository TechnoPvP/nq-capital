// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
}

model User {
  id                   Int                  @id @default(autoincrement())
  first_name           String
  middle_name          String?
  last_name            String
  password             String
  avatar               String?
  mobile_number        String?
  email                String               @unique
  role                 UserRole             @default(MANAGER)
  password_reset_token PasswordResetToken[]
  sent_invitations     Invitation[]
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  fund_adjustments     FundAdjustment[]
  assigned_tickets     Ticket[]
  messages             Message[]
  assets               Asset[]
}

enum InvestorAccountStatus {
  ONBOARDING
  ACTIVE
  DISABLED
}

// TODO
// Store payment modes (bank details, paypal, etc)
// Create separate table for payment modes
model Investor {
  id              Int                   @id @default(autoincrement())
  first_name      String
  middle_name     String?
  last_name       String
  email           String                @unique
  password        String?
  passport_number String?
  national_id     String?
  date_of_birth   DateTime?
  nationality     String?
  company_name    String?
  company_tax_id  String?
  is_accredited   Boolean?
  avatar          String?
  mobile_number   String?
  account_status  InvestorAccountStatus @default(ACTIVE)
  address         Address?              @relation(fields: [address_id], references: [id])
  address_id      Int?
  notes           Note[]
  invitations     Invitation[]
  invested_funds  InvestorFund[]
  bank_accounts   BankAccount[]
  tickets         Ticket[]
  created_at      DateTime              @default(now())
  updated_at      DateTime              @updatedAt
  messages        Message[]
  assets          Asset[]
  transactions    Transaction[]
}

model Note {
  id          Int      @id @default(autoincrement())
  title       String?
  content     String
  investor    Investor @relation(fields: [investor_id], references: [id])
  investor_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

enum BankAccountType {
  CHECKING
  SAVINGS
}

model BankAccount {
  id                  Int              @id @default(autoincrement())
  nickname            String?
  bank_name           String
  account_number      String
  account_holder_name String
  type                BankAccountType?
  bank_country        String // ISO 3166-1 alpha-2 country code
  currency            String // ISO 4217 currency code
  routing_number      String?
  swift_code          String? // SWIFT/BIC code for international transfers
  iban                String? // International Bank Account Number
  sort_code           String? // Sort code for UK banks
  bsb_number          String? // Bank State Branch number for Australian banks
  bank_code           String? // Used in some countries instead of routing number/sort code
  branch_code         String? // Specific branch code if applicable
  branch_address      String? // Physical address of the bank's branch
  is_primary          Boolean          @default(false)
  investor            Investor         @relation(fields: [investor_id], references: [id])
  investor_id         Int
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt
}

enum PaymentMethodType {
  ACH
  WIRE
  CHECK
  PAYPAL
  DIRECT_DEPOSIT
  MONEY_ORDER
  CRYPTO
}

model Fund {
  id               Int              @id @default(autoincrement())
  name             String           @unique
  balance          Float            @db.DoublePrecision()
  investors        InvestorFund[]
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  fund_adjustments FundAdjustment[]
}

model FundAdjustment {
  id                  Int      @id @default(autoincrement())
  description         String?
  amount              Float    @db.DoublePrecision()
  // change_type ChangeType (Negative or Positive)
  // type FundAdjustmentType (Could be used to specify where the fund adjustment originated)
  balance_before      Float    @db.DoublePrecision()
  balance_after       Float    @db.DoublePrecision()
  fund                Fund     @relation(fields: [fund_id], references: [id])
  fund_id             Int
  adjusted_by_user    User     @relation(fields: [adjusted_by_user_id], references: [id])
  adjusted_by_user_id Int
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
}

model InvestorFund {
  id                 Int      @id @default(autoincrement())
  stake_percentage   Decimal
  initial_investment Float    @db.DoublePrecision()
  invested_amount    Float    @db.DoublePrecision()
  balance            Float    @default(0) @db.DoublePrecision()
  investor           Investor @relation(fields: [investor_id], references: [id])
  investor_id        Int
  fund               Fund     @relation(fields: [fund_id], references: [id])
  fund_id            Int
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  @@unique([investor_id, fund_id])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  REVOKED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  ADJUSTMENT
  FEE
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  REVERSED
  FAILED
}

enum TicketStatus {
  CLOSED
  OPEN
  UNDER_REVIEW
}

enum TicketType {
  DOCUMENT_REQUEST
  SUPPORT
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Ticket {
  id                  Int            @id @default(autoincrement())
  data                Json
  type                TicketType
  status              TicketStatus   @default(OPEN)
  priority            TicketPriority @default(MEDIUM)
  investor            Investor       @relation(fields: [investor_id], references: [id], onDelete: Cascade)
  investor_id         Int
  assigned_to_user    User?          @relation(fields: [assigned_to_user_id], references: [id])
  assigned_to_user_id Int?
  messages            Message[]
  updated_at          DateTime       @updatedAt
  created_at          DateTime       @default(now())
}

enum UserType {
  INVESTOR
  ADMIN
}

model Message {
  id                  Int       @id @default(autoincrement())
  content             String
  type                UserType
  ticket              Ticket?   @relation(fields: [ticket_id], references: [id])
  ticket_id           Int?
  sent_by_user        User?     @relation(fields: [sent_by_user_id], references: [id])
  sent_by_user_id     Int?
  sent_by_investor    Investor? @relation(fields: [sent_by_investor_id], references: [id])
  sent_by_investor_id Int?
  assets              Asset[]
  edit_count          Int       @default(0)
  updated_at          DateTime  @updatedAt
  created_at          DateTime  @default(now())
}

model Transaction {
  id            Int               @id @default(autoincrement())
  type          TransactionType
  amount        Float             @db.DoublePrecision()
  currency_code String            @default("USD")
  balance_after Float             @db.DoublePrecision()
  // todo fund its related to
  description   String?
  fee           Decimal?
  external_id   String? // Link to any external id
  status        TransactionStatus @default(PENDING)
  meta          Json?
  investor      Investor?         @relation(fields: [investor_id], references: [id])
  investor_id   Int?
  created_at    DateTime          @default(now())
  updated_at    DateTime          @updatedAt
  // original_transaction_id Transaction
  // investorFund    InvestorFund    @relation(fields: [investorFundId], references: [id])
  // investor_fund_id Int
}

enum InvitationType {
  INVESTOR
  USER
}

model Invitation {
  id                 Int              @id @default(autoincrement())
  email              String
  invitation_code    String
  type               InvitationType
  status             InvitationStatus @default(PENDING)
  investor           Investor?        @relation(fields: [investor_id], references: [id])
  investor_id        Int?
  invited_by         User             @relation(fields: [invited_by_user_id], references: [id])
  invited_by_user_id Int
  responded_at       DateTime?
  resent_count       Int              @default(0)
  expires_at         DateTime         @default(dbgenerated("CURRENT_TIMESTAMP + INTERVAL '4 days'"))
  sent_at            DateTime         @default(now())
  updated_at         DateTime         @updatedAt

  @@unique([email, type])
}

model Address {
  id              Int        @id @default(autoincrement())
  street          String
  street_2        String?
  city            String
  state_province  String
  postal_zip_code String?
  country         String
  country_code    String
  latitude        Decimal
  longitude       Decimal
  additional_info Json?
  verified        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  investors       Investor[]
}

model PasswordResetToken {
  id              Int      @id @default(autoincrement())
  token           String
  expiration_date DateTime
  is_deactivated  Boolean  @default(false)
  user            User     @relation(fields: [user_id], references: [id])
  user_id         Int
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())
}

enum AssetType {
  PDF
  IMAGE
  WORD
  EXCEL
  CSV
  UNKNOWN
}

model Asset {
  id            Int       @id @default(autoincrement())
  original_name String    @default("Unknown")
  key           String    @unique
  url           String    @unique
  mime_type     String
  asset_type    AssetType @default(UNKNOWN)
  user          User?     @relation(fields: [user_id], references: [id])
  user_id       Int?
  investor      Investor? @relation(fields: [investor_id], references: [id])
  investor_id   Int?
  message       Message?  @relation(fields: [message_id], references: [id])
  message_id    Int?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now()) @updatedAt
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
